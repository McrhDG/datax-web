<?xml version="1.0" encoding="UTF-8"?>
<configuration packagingData="true">

    <property resource="bootstrap.yml"/>
    <springProperty scope="context" name="appName" source="spring.application.name"/>
    <springProperty scope="context" name="env" source="spring.profiles.active" />
    <springProperty scope="context" name="endpoint" source="endpoint" />
    <springProperty scope="context" name="accessKeyId" source="accessKeyId" />
    <springProperty scope="context" name="accessKeySecret" source="accessKeySecret" />
    <springProperty scope="context" name="project" source="project" />
    <springProperty scope="context" name="logStore" source="logStore" />
    <springProperty scope="context" name="ip" source="ip" />

    <!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <property name="LOG_HOME" value="/data/logs/${appName}"/>
    <!-- 日志输出格式 -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %M 输出执行日志请求的方法名  %c包路径  %F 输出执行记录请求的java源文件名  %L输出执行日志请求的行号  %msg：日志消息，%n是换行符-->
    <property name="ENCODER_PATTERN"
              value="[${appName}][%d{yyyy-MM-dd HH:mm:ss}][%-5level][%thread][%M][%c.%F,%L]==>%msg%n"/>
    <property name="ENCODER_PATTERN_ERROR"
              value="[${appName}][%d{yyyy-MM-dd HH:mm:ss}][%-5level][%thread][%logger{80}.%M][%F.%L]-->%msg%n"/>

    <!--为了防止进程退出时，内存中的数据丢失，请加上此选项-->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>
    <!-- 阿里云 loghubAppender	-->
    <appender name="loghubAppender" class="com.aliyun.openservices.log.logback.LoghubAppender">
        <!--必选项-->
        <!-- 账号及网络配置 -->
        <endpoint>${endpoint}</endpoint>
        <accessKeyId>${accessKeyId}</accessKeyId>
        <accessKeySecret>${accessKeySecret}</accessKeySecret>
        <!-- sls 项目配置 -->
        <project>${project}</project>
        <logStore>${appName}</logStore>
        <!--必选项 (end)-->

        <!-- 可选项 -->
        <topic>${appName}</topic>
        <source>${ip}</source>

        <!-- 可选项 详见 '参数说明'-->
        <totalSizeInBytes>104857600</totalSizeInBytes>
        <maxBlockMs>60000</maxBlockMs>
        <ioThreadCount>8</ioThreadCount>
        <batchSizeThresholdInBytes>524288</batchSizeThresholdInBytes>
        <batchCountThreshold>4096</batchCountThreshold>
        <lingerMs>2000</lingerMs>
        <retries>10</retries>
        <baseRetryBackoffMs>100</baseRetryBackoffMs>
        <maxRetryBackoffMs>100</maxRetryBackoffMs>

        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>${ENCODER_PATTERN_ERROR}</pattern>
            </layout>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter"><!-- 打印WARN,ERROR级别的日志 -->
            <level>INFO</level>
        </filter>

        <mdcFields>THREAD_ID,MDC_KEY</mdcFields>
    </appender>

    <!-- 控制台日志：输出全部日志到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${ENCODER_PATTERN}</Pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- 文件日志：输出全部日志到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/output.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN_ERROR}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 文件日志：输出全部日志到文件 -->
    <appender name="CANAL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/canal.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <appender name="MONGO_WATCH_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/mongo_watch.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--mybatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

    <!--开发:打印控制台-->
    <springProfile name="dev,rebuild-dev">
        <root>
			<level value="INFO"/>
			<appender-ref ref="STDOUT"/>
			<appender-ref ref="FILE"/>
			<appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="loghubAppender"/>
        </root>
        <logger name="com.wugui.datax.admin.canal" level="INFO" additivity="false" >
            <appender-ref ref="CANAL_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.wugui.datax.admin.mongo" level="INFO" additivity="false" >
            <appender-ref ref="MONGO_WATCH_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="STDOUT"/>
        </logger>
    </springProfile>

    <!--测试环境:仅输出到文件-->
    <springProfile name="test,rebuild-test,uat">
        <root>
            <level value="INFO"/>
            <appender-ref ref="FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="loghubAppender"/>
        </root>
        <logger name="com.wugui.datax.admin.canal" level="INFO" additivity="false" >
            <appender-ref ref="CANAL_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
        <logger name="com.wugui.datax.admin.mongo" level="INFO" additivity="false" >
            <appender-ref ref="MONGO_WATCH_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
    </springProfile>

    <!--生产环境:仅输出到文件-->
    <springProfile name="prd">
        <logger name="com.netflix.discovery.DiscoveryClient" level="WARN" />
        <root>
            <level value="INFO"/>
            <appender-ref ref="FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="loghubAppender"/>
        </root>
        <logger name="com.wugui.datax.admin.canal" level="INFO" additivity="false" >
            <appender-ref ref="CANAL_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
        <logger name="com.wugui.datax.admin.mongo" level="INFO" additivity="false" >
            <appender-ref ref="MONGO_WATCH_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
        </logger>
    </springProfile>

</configuration>
